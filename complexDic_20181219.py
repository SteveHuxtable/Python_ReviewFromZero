'''
我们昨天已经学习了字典这一数据结构，但涉及都是简单的“key-value”的组合，今天我们对字典的内容进行一个收尾，
展示下字典其实是用来构造更为复杂的数据结构“表”的重要工具，同时也测试能否用列表或元组构造“表”。
'''

# 字典列表
# 什么时候构造字典列表呢？比如你班上有4名同学，这四名同学都考了三门考试，为了储存这个信息，就可以采用字典列表

stu_1 = {'Math' : 90, 'English' : 91, 'History' : 84}
stu_2 = {'Math' : 91, 'English' : 84, 'History' : 80}
stu_3 = {'Math' : 90, 'English' : 91, 'History' : 84}
stu_4 = {'Math' : 100, 'English' : 71, 'History' : 94}

# 我们获得了四名学生的成绩字典，而后构造字典列表
exam_results = [stu_1, stu_2, stu_3, stu_4]
print(exam_results)

# 这个字典列表实际相当于一个四行三列的表，其中每个元素我们都可以进行考察
print(exam_results[3])
print(exam_results[3]['Math'])

# 于是，我们通过横竖两个索引，就获得了第4个同学的数学成绩
# 我们进一步可以输出所有学生的数学成绩
for stu in exam_results:
   print(stu['Math'])

# 当学生增加时，我们可以向字典列表后进行元素（也就是字典）的追加
stu_5 = {'Math' : 94, 'English' : 81, 'History' : 84}
exam_results.append(stu_5)
print(exam_results)

# 很显然我们追加元素成功了,之后我们也可以操作列表进行删除，插入等操作。

# 在学习了很规则的字典列表后，我们学习一个随意一些的带有列表元素的字典，也很好理解
# 比如我们记录一个班级中每个同学的女朋友的名字，难以避免的有一些同学就同时有很多女朋友，那这个女朋友的名字就需要用字典来储存。

gf_dic = {
   'Bob' : ["Julia"],
   'Jay' : ["Amy"],
   'Steven' : ["Catherin", "Fiona"]
}

print(gf_dic)

# 显然Steven同学比较浪

# 最后我们介绍一下字典嵌套在字典中的结构
# 这个数据结构也比较好理解，比如要记录每个同学的选课和成绩，但是每个同学的课程并不相同

stu_1 = {'Math' : 96, 'English' : 90}   # 修改下之前的stu_1

# 之后我们把学生的id和成绩单组成新的字典
results_dic = {
   '1' : stu_1,
   '2' : stu_2,
   '3' : stu_3,
   '4' : stu_4,
   '5' : stu_5
}

# 此时，我们可以很容易地根据一个人的学号，输出他的全部成绩
print(results_dic['1'])

# 到此，我们用字典和列表组合出了三种复杂的数据结构，这三种数据结构在实际中各有用处。后续的实例应用中我们都会看到。

